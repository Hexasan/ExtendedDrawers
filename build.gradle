plugins {
    id 'fabric-loom' version '1.2-SNAPSHOT'
    id 'io.github.juuxel.loom-quiltflower' version '1.7.1'
    id 'maven-publish'
}

def run = System.env.GITHUB_RUN_NUMBER
def isDev = System.env.DEV_BUILD == "true"

version project.mod_version + (isDev ? "-dev.$run" : "") + "+mc.$minecraft_version"
group project.maven_group

repositories {
    maven { url "https://kneelawk.com/maven/" }
    maven { url "https://maven.alexiil.uk/" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    maven { url "https://maven.blamejared.com" }
    maven { url "https://maven.isxander.dev/releases" }
    maven { url "https://maven.terraformersmc.com" }
    maven { url "https://jitpack.io" }
}

// Has to run before dependencies so that we get access to proper dependency configurations
loom.splitEnvironmentSourceSets()

dependencies {
    // Fabric
    minecraft "com.mojang:minecraft:$minecraft_version"
    mappings "net.fabricmc:yarn:$yarn_mappings:v2"
    modImplementation "net.fabricmc:fabric-loader:$loader_version"
    modImplementation "net.fabricmc.fabric-api:fabric-api:$fabric_version"

    // Dependencies
    include modImplementation("com.kneelawk:graphlib:$graphlib_version")
    modImplementation "vazkii.patchouli:Patchouli:$patchouli_version"

    modImplementation annotationProcessor(include("com.github.mattidragon:ConfigToolkit:$configtoolkit_version"))
    modImplementation include("dev.isxander.yacl:yet-another-config-lib-fabric:$yacl_version")
    modImplementation "com.terraformersmc:modmenu:$modmenu_version"

    // Mixin Extras
    modImplementation include("com.github.LlamaLad7.mixinextras:mixinextras-fabric:$mixinextras_version")
    annotationProcessor clientAnnotationProcessor("com.github.LlamaLad7.mixinextras:mixinextras-fabric:$mixinextras_version")

    // Add generated data to runtime classpath (slightly hacky)
    runtimeOnly files("src/main/generated")
}

loom {
    // Apply datagen at runtime
    mods.register("extended_drawers") {
        sourceSet sourceSets.main
        sourceSet sourceSets.client
        modFiles.from file("src/main/generated")
    }

    runs.register("datagen") {
        inherit runs.server
        name "Data Generation"
        vmArg "-Dfabric-api.datagen"
        vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
        vmArg "-Dfabric-api.datagen.strict-validation"

        ideConfigGenerated = true

        runDir "build/datagen/"
    }
}

// Delete datagen on clean
clean.delete("src/main/generated")

processResources {
    inputs.property "version", version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": version
    }
    filesMatching("**/assets/*/lang/*.json") {
        expand "version": project.mod_version
    }
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }

    // Copy datagen to jar
    dependsOn tasks.runDatagen
    from("src/main/generated") {
        exclude "README.md"
        exclude ".cache"
    }
}

java {
    archivesBaseName = project.archives_base_name
    withSourcesJar()
}


publishing {
    publications.create("mavenJava", MavenPublication) {
        from components.java
    }
    repositories {}
}
