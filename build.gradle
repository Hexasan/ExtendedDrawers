plugins {
    id 'fabric-loom' version '0.12-SNAPSHOT'
    id 'maven-publish'
}

var run = System.env.GITHUB_RUN_NUMBER
var isDev = System.env.DEV_BUILD == "true"

version project.mod_version + (isDev ? "-dev.$run" : "") + "+mc.$minecraft_version"
group project.maven_group

repositories {
    ext.maven = { String s -> maven {url(s)}}

    //mconfig dep
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }

    maven { url "https://jitpack.io" }
    maven { url "https://kneelawk.com/maven/" }
    maven { url "https://maven.blamejared.com" }
}

dependencies {
    minecraft "com.mojang:minecraft:$minecraft_version"
    mappings "net.fabricmc:yarn:$yarn_mappings:v2"
    modImplementation "net.fabricmc:fabric-loader:$loader_version"
    modImplementation "net.fabricmc.fabric-api:fabric-api:$fabric_version"

    // Mconfig
    include modImplementation("com.github.mattidragon:mconfig:$mconfig_version")
    include modImplementation("com.kneelawk:graphlib:$graphlib_version")

    // Mixin Extras
    include implementation("com.github.LlamaLad7:MixinExtras:0.0.10")
    annotationProcessor("com.github.LlamaLad7:MixinExtras:0.0.10")

    modImplementation "vazkii.patchouli:Patchouli:1.18.2-71.1-FABRIC"
}

loom {
    runs {
        datagen {
            inherit server
            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
            vmArg "-Dfabric-api.datagen.strict-validation"

            ideConfigGenerated = true

            runDir "build/datagen"
        }
    }
}

task copyDatagen(type: Copy) {
    from "src/main/generated"
    into "build/resources/main"
    dependsOn tasks.runDatagen
}

clean {
    delete "src/main/generated"
}

processResources {
    inputs.property "version", version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": version
    }
    filesMatching("**/assets/*/lang/*.json") {
        expand "version": project.mod_version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
    dependsOn tasks.copyDatagen
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    repositories {}
}
